I",.<p><a href="https://jupyter.org/hub">JupyterHub</a> is a powerful program that allows companies, classrooms or research labs to share computational hardware and run <em>notebook</em> based code concurrently. <a href="https://jupyter.org/index.html">Jupyter’s</a> goal is to provide interactive computing software for different programming languages. JupyterHub allows multiple users to take advantage of a single server by separating user processes and programs.</p>

<p>We foresee much of our development to be done through JupyterHub as it is simple to use, scalable and functions well for multiple use cases.</p>

<h2 id="setup-guide">Setup Guide</h2>

<p>JupyterHub (and Jupyter in general) has a server based design. A server is responsible for running the actual code, and a client (typically visualized in a browser) can write code for the server to run. On our workstation, there is a always running server setup. This is nice, as you will never need to launch the server yourself. So, JupyterHub is essentially setup already.</p>

<p><a href="https://jupyterlab.readthedocs.io/en/stable/">JupyterLab</a> is the next-generation user interface for Jupyter and can include Jupyter Notebooks. It is a very intuitive and clean program, so we have opted to use it as opposed to just regular Jupyter Notebooks.</p>

<h3 id="initializing-an-ssh-tunnel">Initializing an SSH Tunnel</h3>

<p>For you to be able to visualize JupyterHub in your browser, your computer needs to know that there is a JupyterHub instance running on the workstation. This can be done through something called an <code class="language-plaintext highlighter-rouge">ssh</code> Tunnel. Visit <a href="/posts/ssh#ssh-tunnel">this</a> post for information on how to setup an <code class="language-plaintext highlighter-rouge">ssh</code> tunnel.</p>

<p>Jupyter is run on port <code class="language-plaintext highlighter-rouge">8000</code>, so you must forward that port to your own computer. In theory, you can map <code class="language-plaintext highlighter-rouge">8000</code> to any port you’d like, but we’ll leave it at <code class="language-plaintext highlighter-rouge">8000</code> for simplicity. Your command may look something like this:</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>ssh <span class="nt">-L</span> 8000:localhost:8000 <span class="nt">-J</span> &lt;cae username&gt;@best-tux.cae.wisc.edu &lt;cae username&gt;@carproject-06.engr.wisc.edu
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">-L</code> option will forward port <code class="language-plaintext highlighter-rouge">8000</code> on the work station to your computer at <code class="language-plaintext highlighter-rouge">8000</code>. The <code class="language-plaintext highlighter-rouge">-J</code> command will be a <code class="language-plaintext highlighter-rouge">ProxyJump</code> and feed you through the cae computers to the work station.</p>

<h3 id="opening-jupyterhub-in-your-browser">Opening JupyterHub in your Browser</h3>

<p>Your computer should now have access to the JupyterHub server. To open up Jupyter, go to a browser and type in <code class="language-plaintext highlighter-rouge">localhost:8000/jupyter</code>. This should open a webpage with a login prompt. Login with your cae credentials (same as the work station). It should look similar to this:</p>

<p><img src="/assets/img/workstation/jupyter_login_screen.png" alt="Jupyter Login" /></p>

<blockquote>
  <p>Note: Currently, a non-secure <code class="language-plaintext highlighter-rouge">http</code> connection is used. Your information and activity is safe because of cae’s vpn, however a more secure <code class="language-plaintext highlighter-rouge">https</code> connection will be used in the future.</p>
</blockquote>

<p>Once logged in, a JupyterLab instance will load. You can edit, delete and add files via the file explorer on the left side. If you click on a file, JupyterLab will open it similar to a regular IDE. Your browser should look similar to the following image.</p>

<p><img src="/assets/img/workstation/jupyter_launch_screen.png" alt="Jupyter Launch" /></p>

<h3 id="creating-a-jupyter-kernel">Creating a Jupyter Kernel</h3>

<p>As you can see in the previous image (or in your browser window), within the Launcher tab, there is a Notebook and a Console section. Within those sections, there should be a single square titled “Python3”. For JupyterLab to work, there are isolated “kernels” that are used to run various programs. The “Python3” kernel is installed globally on the workstation and is <strong>not</strong> configurable by most users. In order to install custom packages, you will want to create a new kernel.</p>

<p><a href="https://www.anaconda.com/">Anaconda</a> is a fantastic tool for scientific computing and package management. It is the tool we use for isolating python environments between users. Please see <a href="/posts/anaconda">this post</a> for an explanation on how to setup your own <code class="language-plaintext highlighter-rouge">conda</code> environment. <em>For the remaining commands in this section, it is assumed you have setup <strong>and activated</strong> your <code class="language-plaintext highlighter-rouge">conda</code> environment</em>.</p>

<p>Head back to your terminal window and with a <code class="language-plaintext highlighter-rouge">conda</code> environment setup <strong>and activated</strong>, you can now create your own kernel. Run the following command to do so:</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>conda <span class="nb">install </span>ipykernel
ipython kernel <span class="nb">install</span> <span class="nt">--user</span> <span class="nt">--name</span> <span class="s1">'WA'</span> <span class="nt">--display-name</span> <span class="s2">"WA"</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>This will create a kernel with the name <code class="language-plaintext highlighter-rouge">WA</code> and will be configured for your user account so you can install and uninstall packages as you please. Reload the JupyterLab window in your browser. It should now look like the image below.</p>

<p><img src="/assets/img/workstation/jupyter_post_kernel_creation.png" alt="Jupyter Post Kernel Creation" /></p>

<h2 id="using-jupyterlab">Using JupyterLab</h2>

<p>Please visit the <a href="https://jupyterlab.readthedocs.io/en/stable/user/interface.html">JupyterLab documentation</a> for more information about the interface and uses. Video tutorials will be posted in the future documenting specific use cases for Wisconsin Autonomous.</p>

<h2 id="management">Management</h2>

<p>This JupyterHub instance was configured with simplicity and scalability in mind. Because long term changes were unknown at the time (whether we will get more workstations, number of users, etc.), <a href="https://tljh.jupyter.org/en/latest/">The Little JupyterHub</a> was not chosen here. Instead, <a href="https://jupyterhub.readthedocs.io/en/stable/installation-guide-hard.html">this tutorial</a> was followed to configure the system.</p>

<p>For your convenience, a installation guide is described below. Only information regarding configuration is given in here. Some steps vary from the original tutorial, so please refer to this guide if the goal is to configure the system.</p>

<h3 id="setting-up-jupyterhub">Setting up JupyterHub</h3>

<p>The JupyterHub instance was created in a virtualenv located at <code class="language-plaintext highlighter-rouge">/opt/jupyterhub</code>. As you’ll see later, this is the location we will place many configuration based files.</p>

<p>The <code class="language-plaintext highlighter-rouge">jupyterhub_config.py</code> file, the main file that manages the system configuration for JupyterHub, is located at <code class="language-plaintext highlighter-rouge">/opt/jupyterhub/etc/jupyterhub/</code> (within the virtualenv we created earlier). By default, the user interface is set to display as JupyterLab, which is essentially a newer release of Jupyter Notebook with extended IDE-like features. To changes this, set the following option in the <code class="language-plaintext highlighter-rouge">jupyterhub_config.py</code> file (currently it’s set to <code class="language-plaintext highlighter-rouge">/lab</code>):</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="s">c.Spawner.default_url = '/tree'</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>To have JupyterHub run on startup, a system service used and run by <a href="https://man7.org/linux/man-pages/man1/systemd.1.html">Systemd</a>. The <code class="language-plaintext highlighter-rouge">.service</code> file is located at <code class="language-plaintext highlighter-rouge">/opt/jupyterhub/etc/systemd/jupyterhub.service</code>. There shouldn’t be much to change here, but this basically just runs JupyterHub and loads in the config file we created.</p>

<p><a href="https://docs.conda.io/en/latest/">Anaconda</a> was used for managing different Python environments. Anaconda is managed using modulefiles, of which we wrote a <a href="/posts/modules">post about</a>. The location of the <code class="language-plaintext highlighter-rouge">conda</code> environments deviates from the original guide because of the <code class="language-plaintext highlighter-rouge">modulefile</code> management system. A default <code class="language-plaintext highlighter-rouge">conda</code> environment was made with only a few packages. Since it is a global install, <code class="language-plaintext highlighter-rouge">pip install</code> or <code class="language-plaintext highlighter-rouge">conda install</code> isn’t allowed. Instead, users should create their own conda environment to have custom installs.</p>

<p>Furthermore, located within the <code class="language-plaintext highlighter-rouge">jupyterhub_config.py</code>, the <code class="language-plaintext highlighter-rouge">autonomous-sudo</code> user group has been configured as admins of the JupyterHub instance.</p>

<p>:exclamation: TODO: Details on how to setup conda env for user :exclamation:</p>

<p>:exclamation: TODO: Security details. As of 1/5/2020 our domain (www.wisconsinautonomous.org) is owned by Wix.com, so will need to wait at a minimum 60 days to configure custom URL, i.e. still have to use <code class="language-plaintext highlighter-rouge">localhost:8000/jupyter</code> :exclamation:</p>

<h2 id="support">Support</h2>

<p>Contact <a href="mailto:aryoung5@wisc.edu">Aaron Young</a> for any questions or concerns regarding the contents of this repository.</p>

<h2 id="see-also">See Also</h2>

<p>Stay up to date with our technical info by following our <a href="https://www.wisconsinautonomous.org/blog">blog</a>.</p>

<p>Follow us on <a href="https://www.facebook.com/wisconsinautonomous/">Facebook</a>, <a href="https://www.instagram.com/wisconsinautonomous/">Instagram</a>, and <a href="https://www.linkedin.com/company/wisconsin-autonomous/about/">LinkedIn</a>!</p>

<p><img src="/assets/img/logos/wa-white.png" alt="WA Logo" class="left" height="100" />
<img src="/assets/img/logos/uw-crest.png" alt="Wisconsin Crest" class="right" height="100" /></p>
:ET