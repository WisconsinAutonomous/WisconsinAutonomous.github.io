I"žM<p><a href="http://modules.sourceforge.net/">Environment Modules</a> allows users to configure a shell environment efficiently and reduce conflicting installations of packages. The main ingredients the define Modules are described in files called <code class="language-plaintext highlighter-rouge">modulefiles</code>. <code class="language-plaintext highlighter-rouge">modulefiles</code> provide instructions for how to <em>load</em> and <em>unload</em> specific modules, such as setting the <code class="language-plaintext highlighter-rouge">PATH</code>, <code class="language-plaintext highlighter-rouge">PYTHONPATH</code> or other environment variables. This means that multiple versions of the same software can exist on a system without actually conflicting with each other; i.e. someone could <em>load</em> <code class="language-plaintext highlighter-rouge">gcc 9.3</code> while someone else would rather use <code class="language-plaintext highlighter-rouge">gcc 8.4</code>, of which do not actually interact with one another if their individual <code class="language-plaintext highlighter-rouge">modulefiles</code> are loaded separately.</p>

<p>Our work station uses Environment Modules, as it helps leaders create software packages loadable by certain members or students without breaking another persons installation. In this post, I will describe how to create a <code class="language-plaintext highlighter-rouge">modulefile</code>, where modules should be placed and how to <em>load</em> or <em>unload</em> modules.</p>

<h2 id="using-modules">Using Modules</h2>

<p>Modules are very easy to use, both from a leaderâ€™s perspective and a studentâ€™s.</p>

<p>For most, youâ€™ll never need to create a <code class="language-plaintext highlighter-rouge">modulefile</code>. For those people, using modules is as simple as running one or two commands to search for available modules and then load them.</p>

<p>For additional research, please reference their official <a href="http://modules.sourceforge.net/">website</a> and <a href="https://modules.readthedocs.io/en/latest/">documentation</a>.</p>

<h3 id="loading-a-modulefile">Loading a Modulefile</h3>

<p>Loading a specific module is as easy as running the following command:</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span>module load &lt;module name&gt;
</pre></td></tr></tbody></table></code></pre></div></div>

<p>This will grab the <code class="language-plaintext highlighter-rouge">modulefile</code> that describes that module and complete the instructions it describes. You may also load multiple files at once. For instance, the following command will load gcc 9.3 and cuda 11.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span>module load gcc/9.3 cuda/11
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="searching-for-a-modulefile">Searching for a Modulefile</h3>

<p>To run the <code class="language-plaintext highlighter-rouge">load</code> command, youâ€™ll need to know the name of a module. The names of modules can be found in a variety of ways, but the two most common are the <code class="language-plaintext highlighter-rouge">avail</code> commands and through shell completion.</p>

<p>The <code class="language-plaintext highlighter-rouge">avail</code> command is a way to list out every <code class="language-plaintext highlighter-rouge">modulefile</code> created on the system. An example output can be seen below.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span>module avail
anaconda/2/2019.03              boost/1.62.0        cuda/11             gcc/8.1.x
anaconda/3/                     boost/1.66.0        cuda/11.0           gcc/8.2.0
anaconda/3/2019.03              boost/1.67.0        cuda/11.1           gcc/8.2.0-el7
anaconda/3/2019.07              boost/1.67.0-py3    cuda/11.2           gcc/8.2.x
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">avail</code> command can be overwhelming, especially with a lot of modulefiles on the system. Another helpful tool is shell completion, which basically allows you to begin to type a modules name, hit tab and possible options will then display. This is done within the <code class="language-plaintext highlighter-rouge">load</code> command. An example is shown below (the <code class="language-plaintext highlighter-rouge">&lt;tab&gt;</code> sequence indicates the tab key was pressed).</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span>module load &lt;tab&gt;
anaconda              			boost        		cuda             	gcc

<span class="nv">$ </span>module load anaconda/&lt;tab&gt;
anaconda/2/              		anaconda/3/

<span class="nv">$ </span>module load anaconda/3/&lt;tab&gt;
anaconda/3/2019.03		 		anaconda/3/2019.07
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="automatic-loading-through-shell-profiles">Automatic Loading through Shell Profiles</h3>

<p>A very common tool for automatic shell configuration is shell profile files. With shell profile files, we can tell the terminal to configure out environment <em>every</em> time you open it up. This means you can add <code class="language-plaintext highlighter-rouge">module load &lt;common module&gt;</code> in your shell profile file and not have to actually run it yourself. I have already gone in depth about shells in another <a href="/posts/shells">post</a>, so please read through that post if you have not already.</p>

<p>If you havenâ€™t noticed already, there should be already be a line in your shell profile file (weâ€™ll assume itâ€™s a <code class="language-plaintext highlighter-rouge">bashrc</code> file from now on) that appears to reference modules. This command initializes your shell environment so you can run <code class="language-plaintext highlighter-rouge">module ...</code> commands. That line may look like the following:</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">source</span> /usr/local/Modules/init/bash
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong><em>Do not edit that line!!!</em></strong></p>

<p><strong>Following</strong> this line, you may place custom <code class="language-plaintext highlighter-rouge">module</code> specific commands to be run everytime you open a terminal. For example, some people may know they would like to use anaconda, cuda and gcc almost everytime they use the workstation. Running <code class="language-plaintext highlighter-rouge">module load anaconda/3/2019.03 gcc/9.3 cuda/11</code> everytime you open a terminal window would kind of suck. So it is advisable to add that line to your <code class="language-plaintext highlighter-rouge">bashrc</code> (or your shells equivalent).</p>

<p>Your <code class="language-plaintext highlighter-rouge">bashrc</code> may look something like thisâ€¦</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nb">source</span> /usr/local/Modules/init/bash

module load anaconda/3/2019.03 gcc/9.3 cuda/11
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p>Note: Although it may save time for some, do not add <code class="language-plaintext highlighter-rouge">module load &lt;module&gt;</code> to your <code class="language-plaintext highlighter-rouge">bashrc</code> unless necessary, as it may slow down initialization time if your terminal window.</p>
</blockquote>

<h2 id="work-station-configuration">Work Station Configuration</h2>

<p>For people who would like to add global packages, this section aims to explain how <code class="language-plaintext highlighter-rouge">modules</code> are organized on the work station and how <code class="language-plaintext highlighter-rouge">modulefiles</code> can be created in a sustainable manner.</p>

<h3 id="system-organization">System Organization</h3>

<blockquote>
  <p>Warning! This is for advanced users. Please consult team leaders before taking this challenge on.</p>
</blockquote>

<blockquote>
  <p>System configuration of modulefiles requires sudo privileges</p>
</blockquote>

<p>There are two places where <code class="language-plaintext highlighter-rouge">module</code> related information is shared:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">/usr/local/Modules/modulefiles</code>: The location of the <code class="language-plaintext highlighter-rouge">modulefiles</code> which are used to load specific <code class="language-plaintext highlighter-rouge">modules</code></li>
  <li><code class="language-plaintext highlighter-rouge">/usr/local/share</code>: Where the actual package files are located, i.e. where the packages are installed manually</li>
</ul>

<h4 id="modulefiles-organization">Modulefiles Organization</h4>

<p>Each <code class="language-plaintext highlighter-rouge">modulefile</code> in  <code class="language-plaintext highlighter-rouge">/usr/local/Modules/modulefiles</code> should be organized in the following way:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre>.../modulefiles
â”œâ”€â”€ module1/			# Root folder for a module1
â”‚   â”œâ”€â”€ .version		# Describes the default version for module1
â”‚   â”œâ”€â”€ 1.0.4			# Modulefile describing how to load version 1.0.4 of module1
â”‚   â”œâ”€â”€ 1.0.5			# Modulefile describing how to load version 1.0.5 of module1
â”‚   â”œâ”€â”€ 2.0.0			# Modulefile describing how to load version 2.0.0 of module1
â”‚   â””â”€â”€ ...				# Other versions you'd like to have for module1
â”œâ”€â”€ module2/			# Root folder for a module2
â”‚   â”œâ”€â”€ .version		# Describes the default version for module2
â”‚   â””â”€â”€ ...				# Other versions you'd like to have for module2
â””â”€â”€ ...					# Other modules
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">.version</code> file simply describes the default version thats loaded. As the above example describes, a <code class="language-plaintext highlighter-rouge">module1</code> may have three versions. One can load version <code class="language-plaintext highlighter-rouge">1.0.4</code> with <code class="language-plaintext highlighter-rouge">module load module1/1.0.4</code>. However, if the <code class="language-plaintext highlighter-rouge">.version</code> file says <code class="language-plaintext highlighter-rouge">2.0.0</code> is the default version, <code class="language-plaintext highlighter-rouge">module load module1/2.0.0</code> is equivalent to <code class="language-plaintext highlighter-rouge">module load module1</code>. In this example, the <code class="language-plaintext highlighter-rouge">.version</code> file would look like the following:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>#%Module1.0
set ModulesVersion "2.0.0"
</pre></td></tr></tbody></table></code></pre></div></div>

<p>We want sustainability for our packages, so this structure <em>must</em> be maintained. At some point down the road, there may be a lot of packages, so we should ensure everythingâ€™s organized now.</p>

<h4 id="module-source-organization">Module Source Organization</h4>

<p>Similarly to <code class="language-plaintext highlighter-rouge">modulefiles</code>, we must maintain the actual package installation in an organized manner. To do so, we structure the <code class="language-plaintext highlighter-rouge">/usr/local/share</code> as follows:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre>.../share
â”œâ”€â”€ module1/			# Root folder for a module1
â”‚   â”œâ”€â”€ 1.0.4			# Source for version 1.0.4 for module1
â”‚   â”œâ”€â”€ 1.0.5			# Source for version 1.0.5 for module1
â”‚   â”œâ”€â”€ 2.0.0			# Source for version 2.0.0 for module1
â”‚   â””â”€â”€ ...				# Other versions you'd like to have for module1
â”œâ”€â”€ module2/			# Root folder for a module2
â”‚   â””â”€â”€ ...				# Source for other versions for module2
â””â”€â”€ ...					# Other modules
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="creating-a-modulefile">Creating a Modulefile</h3>

<p>Please refer to the previous two sections to see how to structure your module: <a href="#modulefiles-organization"><code class="language-plaintext highlighter-rouge">modulefile</code></a> and <a href="#module-source-organization"><code class="language-plaintext highlighter-rouge">module</code> source</a>.</p>

<p>To see a quality modulefile, please see <a href="#simple-example-modulefile">this section</a>.</p>

<p>The purpose of <code class="language-plaintext highlighter-rouge">modulefiles</code>, <a href="http://modules.sourceforge.net/">among others</a>, is to provide dynamic loading/unloading of software packages with conflicting versioning. Essentially, environment variables are changed in <code class="language-plaintext highlighter-rouge">modulefiles</code> so the current shell is aware of specific packages installations. <code class="language-plaintext highlighter-rouge">modulefiles</code> may affect <code class="language-plaintext highlighter-rouge">PATH</code>, <code class="language-plaintext highlighter-rouge">PYTHONPATH</code> or <code class="language-plaintext highlighter-rouge">LD_LIBRARY_PATH</code> because these are variables associated with the current shell session.</p>

<p><code class="language-plaintext highlighter-rouge">modulefiles</code> are written in the Tool Command Language (Tcl). They are made up of processes and directives. For an in depth explanation about Tcl and <code class="language-plaintext highlighter-rouge">modulefile</code> structures, please refer to the <a href="https://modules.readthedocs.io/en/latest/modulefile.html">documentation</a>.</p>

<p>For Wisconsin Autonomous, <em>unless you know what youâ€™re doing</em>, follow these steps to create a <code class="language-plaintext highlighter-rouge">modulefile</code>. <strong><em>Lines starting and ending with <code class="language-plaintext highlighter-rouge">===</code> should not be included in the actual modulefile. They are simply for explanation purposes</em></strong>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="rouge-code"><pre>=== Header ===
=== Gives Module version and simple file description ===
#%Module1.0
#
# MODULE 1.0.0
#

=== ModulesHelp ===
=== Prints when module help &lt;module&gt; is run ===
proc ModulesHelp { } {
        puts stderr "\tSets up environment for MODULE v1.0.0\n"
}

=== module-whatis ===
=== Prints when module whatis &lt;module&gt; is run ===
module-whatis   "sets up environment for MODULE v1.0.0"

=== Local Variable Setup ===
=== Gives package version and source location ===
set             package MODULE
set             version 1.0.0
set             root    /usr/local/share/$package/$version

=== Environment Variable Setup ===
=== Changes environment variables to allow for interacting with the source ===
append-path     PATH    $root/bin
append-path     LD_LIBRARY_PATH $root/lib64
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="simple-example-modulefile">Simple Example Modulefile</h4>

<p>For reference, this is an example module for CUDA v11.1.1.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre>#%Module1.0
#
# cuda 11.1.1
#
proc ModulesHelp { } {
        puts stderr "\tSets up environment for CUDA v11.1.1\n"
}

module-whatis   "sets up environment for CUDA v11.1.1"

set             package cuda
set             version 11.1.1
set             root    /usr/local/share/$package/$version

setenv          CUDA_HOME       $root

append-path     PATH    $root/bin
append-path     LD_LIBRARY_PATH $root/lib64
</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="complicated-example-modulefile">Complicated Example Modulefile</h4>

<p>For reference, this is an example module for Anaconda v4.9.2.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="rouge-code"><pre>#%Module 1.0
#
# anaconda3 modulefile
#
proc ModulesHelp { } {
        puts stderr "\tAdds Anaconda Python 3 to your PATH environment variable\n"
}

module-whatis   "adds Anaconda Python 3 to your PATH environment variable"

set             version 4.9.2
set             root    /usr/local/share/anaconda/$version

append-path            PATH            $root/bin

set             active_shell    [ module-info shell ]
if { "$active_shell" == "bash" } {
        set             activate_conda  "\$(command conda 'shell.bash' 'hook' 2&gt; /dev/null)"
} elseif { "$active_shell" == "zsh" } {
        set             activate_conda  "\$('conda' 'shell.zsh' 'hook' 2&gt; /dev/null)"
}

if { [ module-info mode load ] } {
        puts stdout "eval $activate_conda"
} else {
        puts stdout "conda deactivate"
}

</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="support">Support</h2>

<p>Contact <a href="mailto:aryoung5@wisc.edu">Aaron Young</a> for any questions or concerns regarding the contents of this repository.</p>

<h2 id="see-also">See Also</h2>

<p>Stay up to date with our technical info by following our <a href="https://www.wisconsinautonomous.org/blog">blog</a>.</p>

<p>Follow us on <a href="https://www.facebook.com/wisconsinautonomous/">Facebook</a>, <a href="https://www.instagram.com/wisconsinautonomous/">Instagram</a>, and <a href="https://www.linkedin.com/company/wisconsin-autonomous/about/">LinkedIn</a>!</p>

<p><img src="/assets/img/logos/wa-white.png" alt="WA Logo" class="left" height="100" />
<img src="/assets/img/logos/uw-crest.png" alt="Wisconsin Crest" class="right" height="100" /></p>
:ET